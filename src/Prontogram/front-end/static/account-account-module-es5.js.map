{"version":3,"sources":["webpack:///src/app/account/account-routing.module.ts","webpack:///src/app/account/account.module.ts","webpack:///src/app/account/layout.component.ts","webpack:///src/app/account/layout.component.html","webpack:///src/app/account/login.component.ts","webpack:///src/app/account/login.component.html","webpack:///src/app/account/register.component.ts","webpack:///src/app/account/register.component.html"],"names":["routes","path","component","children","AccountRoutingModule","forChild","imports","exports","AccountModule","declarations","LayoutComponent","router","accountService","userValue","navigate","templateUrl","LoginComponent","formBuilder","route","alertService","loading","submitted","form","group","username","required","password","controls","clear","invalid","login","f","value","pipe","subscribe","next","returnUrl","snapshot","queryParams","navigateByUrl","error","onSubmit","RegisterComponent","name","secondName","minLength","register","success","keepAfterRouteChange","relativeTo"],"mappings":"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","file":"account-account-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { LayoutComponent } from './layout.component';\r\nimport { LoginComponent } from './login.component';\r\nimport { RegisterComponent } from './register.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: LayoutComponent,\r\n        children: [\r\n            { path: 'login', component: LoginComponent },\r\n            { path: 'register', component: RegisterComponent }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AccountRoutingModule { }","import { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AccountRoutingModule } from './account-routing.module';\r\nimport { LayoutComponent } from './layout.component';\r\nimport { LoginComponent } from './login.component';\r\nimport { RegisterComponent } from './register.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ReactiveFormsModule,\r\n        AccountRoutingModule\r\n    ],\r\n    declarations: [\r\n        LayoutComponent,\r\n        LoginComponent,\r\n        RegisterComponent\r\n    ]\r\n})\r\nexport class AccountModule { }","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AccountService } from '../_services';\r\n\r\n@Component({ templateUrl: 'layout.component.html' })\r\nexport class LayoutComponent {\r\n    constructor(\r\n        private router: Router,\r\n        private accountService: AccountService\r\n    ) {\r\n        // redirect to home if already logged in\r\n        if (this.accountService.userValue) {\r\n            this.router.navigate(['/']);\r\n        }\r\n    }\r\n}","<div class=\"col-md-6 offset-md-3 mt-5\">\r\n    <router-outlet></router-outlet>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '../_services';\r\n\r\n@Component({ templateUrl: 'login.component.html' })\r\nexport class LoginComponent implements OnInit {\r\n    form: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            username: ['', Validators.required],\r\n            password: ['', Validators.required]\r\n        });\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.accountService.login(this.f.username.value, this.f.password.value)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    // get return url from query parameters or default to home page\r\n                    const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n                    this.router.navigateByUrl(returnUrl);\r\n                },\r\n                error: error => {\r\n                    this.alertService.error(\"Username e/o password errati\");\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n}","<h4 align=\"center\">Benvenuto in Prontogram!</h4>\r\n<div class=\"card\">\r\n    <h4 class=\"card-header\">Login</h4>\r\n    <div class=\"card-body\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"form-group\">\r\n                <label for=\"username\">Username</label>\r\n                <input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\r\n                <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.username.errors.required\">Username obbligatorio</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"password\">Password</label>\r\n                <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n                <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.password.errors.required\">Password obbligatoria</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                    Login\r\n                </button>\r\n                <a routerLink=\"../register\" class=\"btn btn-link\">Registrati</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AccountService, AlertService } from '../_services';\r\n\r\n@Component({ templateUrl: 'register.component.html' })\r\nexport class RegisterComponent implements OnInit {\r\n    form: FormGroup;\r\n    loading = false;\r\n    submitted = false;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountService: AccountService,\r\n        private alertService: AlertService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.form = this.formBuilder.group({\r\n            name: ['', Validators.required],\r\n            secondName: ['', Validators.required],\r\n            username: ['', [Validators.required, Validators.minLength(6)]],\r\n            password: ['', [Validators.required, Validators.minLength(6)]]\r\n        });\r\n    }\r\n\r\n    // convenience getter for easy access to form fields\r\n    get f() { return this.form.controls; }\r\n\r\n    onSubmit() {\r\n        this.submitted = true;\r\n\r\n        // reset alerts on submit\r\n        this.alertService.clear();\r\n\r\n        // stop here if form is invalid\r\n        if (this.form.invalid) {\r\n            return;\r\n        }\r\n\r\n        this.loading = true;\r\n        this.accountService.register(this.form.value)\r\n            .pipe(first())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.alertService.success('Ti sei registrato con successo!', { keepAfterRouteChange: true });\r\n                    this.router.navigate(['../login'], { relativeTo: this.route });\r\n                },\r\n                error: () => {\r\n                    this.alertService.error(\"Username già esistente\");\r\n                    this.loading = false;\r\n                }\r\n            });\r\n    }\r\n}","<h4 align=\"center\">Effettua la registazione per accedere a Prontogram!</h4>\r\n<div class=\"card\">\r\n    <h4 class=\"card-header\">Registazione</h4>\r\n    <div class=\"card-body\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"form-group\">\r\n                <label for=\"nome\">Nome</label>\r\n                <input type=\"text\" formControlName=\"name\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.name.errors }\" />\r\n                <div *ngIf=\"submitted && f.name.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.name.errors.required\">Nome obbligatorio</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"cognome\">Cognome</label>\r\n                <input type=\"text\" formControlName=\"secondName\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.secondName.errors }\" />\r\n                <div *ngIf=\"submitted && f.secondName.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.secondName.errors.required\">Cognome obbligatorio</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"username\">Username</label>\r\n                <input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\r\n                <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.username.errors.required\">Username is required</div>\r\n                    <div *ngIf=\"f.username.errors.minlength\">L'username deve essere almeno di 6 caratteri</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"password\">Password</label>\r\n                <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n                <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n                    <div *ngIf=\"f.password.errors.minlength\">La password deve essere almeno di 6 caratteri</div>\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n                    <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n                    Registrati\r\n                </button>\r\n                <a routerLink=\"../login\" class=\"btn btn-link\">Torna alla pagina di login</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>"]}