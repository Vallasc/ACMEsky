{
  "swagger": "2.0",
  "info": {
    "description": "These are the Prontogram's API, they manage everything about users, notifications and subscription of the users to the server.",
    "version": "1.0.0",
    "title": "Prontogram API",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "riccardo.baratin96@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "prontogram.swagger.io",
  "basePath": "/v2",
  "tags": [
    {
      "name": "user",
      "description": "Operations about users"
    },
    {
      "name": "notification",
      "description": "Operations about notification and subscription"
    },
    {
      "name": "authentication",
      "description": "Operations about registartion and login"
    },
    {
      "name": "subscription",
      "description": "Operations about subscription"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Add a new user to the DB",
        "description": "",
        "operationId": "addUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/user/{id}": {
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update an existing user",
        "description": "",
        "operationId": "updateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "User object that needs to be added to the store",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Deletes a user by ID",
        "description": "",
        "operationId": "deleteUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "User id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find user by ID",
        "description": "Returns a single user",
        "operationId": "getUserById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/all": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Finds all users in the DB",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findAllUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "available",
                "pending",
                "sold"
              ],
              "default": "available"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/auth/register": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Returns the new user registered in the system",
        "description": "Registers a new user in the system",
        "operationId": "getInventory",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/auth/login": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/subscription/all": {
      "get": {
        "tags": [
          "subscription"
        ],
        "summary": "Finds all subscriptions in the DB",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findAllSubscriptions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "available",
                "pending",
                "sold"
              ],
              "default": "available"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/subscription/new": {
      "post": {
        "tags": [
          "subscription"
        ],
        "summary": "Creates a new subscription to the DB",
        "description": "",
        "operationId": "addSubscription",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "subscription object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/subscription/{subendpoint}": {
      "delete": {
        "tags": [
          "subscription"
        ],
        "summary": "Deletes a user's subscription by subscription endPoint",
        "description": "",
        "operationId": "deleteSubscription",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "subendpoint",
            "in": "path",
            "description": "subscription endPoint to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid endPoint supplied"
          },
          "404": {
            "description": "subscription not found"
          }
        }
      }
    },
    "/notification": {
      "post": {
        "tags": [
          "notification"
        ],
        "summary": "Creates a new notification to the DB",
        "description": "",
        "operationId": "addNotification",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "notification object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/notification/{notificationId}": {
      "delete": {
        "tags": [
          "notification"
        ],
        "summary": "Deletes a notification by Id",
        "description": "",
        "operationId": "deleteNotification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "notificationId",
            "in": "path",
            "description": "notification Id to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid Id supplied"
          },
          "404": {
            "description": "notification not found"
          }
        }
      },
      "put": {
        "tags": [
          "notification"
        ],
        "summary": "Update an existing notification",
        "description": "",
        "operationId": "updateNotification",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "notificationId",
            "in": "path",
            "description": "Notification object that needs to be added to the store",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Notification not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "Find notification by ID",
        "description": "Returns a single notification",
        "operationId": "getNotificationById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "notificationId",
            "in": "path",
            "description": "ID of notification to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Notification not found"
          }
        }
      }
    },
    "/notification/all/{username}": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "Find all notification by user ID",
        "description": "Returns all notifications for the rigth user ID",
        "operationId": "getNotificationsById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Notifications not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Notification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "flyNumber": {
          "type": "integer",
          "format": "int64"
        },
        "flyCompany": {
          "type": "string"
        },
        "flyToken": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Notification"
      }
    },
    "User": {
      "type": "object",
      "required": [
        "name",
        "secondName",
        "username",
        "password"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "secondName": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Subscription": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "info": {
          "type": "array",
          "items": {}
        },
        "user_id": {
          "type": "array",
          "items": {}
        }
      },
      "xml": {
        "name": "Subscription"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}